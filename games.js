// Games Data and Logic
const games = [
    {
        id: 'neuron-2048',
        title: 'Neuron 2048',
        icon: 'üß©',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Å —á–∏—Å–ª–∞–º–∏. –°–æ–±–∏—Ä–∞–π—Ç–µ –ø–ª–∏—Ç–∫–∏ –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∑–∞–≤–µ—Ç–Ω–æ–π –ø–ª–∏—Ç–∫–∏ 2048!',
        difficulty: 2,
        category: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
        playTime: '5-15 –º–∏–Ω',
        featured: true
    },
    {
        id: 'memory-cards',
        title: 'Memory Cards',
        icon: 'üÉè',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å, –Ω–∞—Ö–æ–¥—è –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –≤–Ω–∏–º–∞–Ω–∏–µ!',
        difficulty: 1,
        category: '–ü–∞–º—è—Ç—å',
        playTime: '3-10 –º–∏–Ω',
        featured: true
    },
    {
        id: 'typing-master',
        title: 'Typing Master',
        icon: '‚å®Ô∏è',
        description: '–£–ª—É—á—à–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏. –°—Ç–∞–Ω—å—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞—Å—Ç–µ—Ä–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!',
        difficulty: 2,
        category: '–û–±—É—á–µ–Ω–∏–µ',
        playTime: '2-5 –º–∏–Ω',
        featured: false
    },
    {
        id: 'math-challenge',
        title: 'Math Challenge',
        icon: 'üßÆ',
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏. –†–µ—à–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –≤—Ä–µ–º—è –∏ —Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∫–æ—Ä–¥—ã!',
        difficulty: 3,
        category: '–û–±—É—á–µ–Ω–∏–µ',
        playTime: '1-3 –º–∏–Ω',
        featured: false
    },
    {
        id: 'code-puzzle',
        title: 'Code Puzzle',
        icon: 'üíª',
        description: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ. –†–µ—à–∞–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∏–∑—É—á–∞–π—Ç–µ –∫–æ–¥!',
        difficulty: 4,
        category: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        playTime: '5-20 –º–∏–Ω',
        featured: true
    },
    {
        id: 'aim-trainer',
        title: 'Aim Trainer',
        icon: 'üéØ',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Ü–µ–ª—è–º –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!',
        difficulty: 2,
        category: '–†–µ–∞–∫—Ü–∏—è',
        playTime: '1-5 –º–∏–Ω',
        featured: false
    }
];

const achievements = [
    {
        id: 'first-game',
        title: '–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞',
        description: '–°—ã–≥—Ä–∞–π—Ç–µ –≤ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
        icon: 'üéÆ',
        unlocked: false
    },
    {
        id: 'puzzle-master',
        title: '–ú–∞—Å—Ç–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫',
        description: '–ü—Ä–æ–π–¥–∏—Ç–µ 3 —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏',
        icon: 'üß©',
        unlocked: false
    },
    {
        id: 'speed-typer',
        title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 50 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É',
        icon: '‚ö°',
        unlocked: false
    },
    {
        id: 'math-genius',
        title: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π',
        description: '–†–µ—à–∏—Ç–µ 100 –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫',
        icon: 'üéì',
        unlocked: false
    },
    {
        id: 'memory-champ',
        title: '–ß–µ–º–ø–∏–æ–Ω –ø–∞–º—è—Ç–∏',
        description: '–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
        icon: 'üèÜ',
        unlocked: false
    }
];

// Game Templates
const gameTemplates = {
    'neuron-2048': `
        <div class="game-container">
            <div class="game-stats">
                <div class="game-stat">
                    <div class="game-stat-value" id="score2048">0</div>
                    <div class="game-stat-label">–°—á—ë—Ç</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="best2048">0</div>
                    <div class="game-stat-label">–õ—É—á—à–∏–π</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="moves2048">0</div>
                    <div class="game-stat-label">–•–æ–¥—ã</div>
                </div>
            </div>
            
            <div class="game-board">
                <div class="grid-2048" id="grid2048"></div>
            </div>
            
            <div class="game-controls">
                <button class="btn btn-primary" onclick="start2048()">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                <button class="btn btn-secondary" onclick="showInstructions('2048')">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</button>
            </div>
            
            <div id="instructions2048" style="display: none; margin-top: 20px; padding: 15px; background: var(--surface-light); border-radius: 8px;">
                <h4>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ 2048:</h4>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–ª–∏—Ç–æ–∫. –ö–æ–≥–¥–∞ –¥–≤–µ –ø–ª–∏—Ç–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —á–∏—Å–ª–æ–º —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—Ç—Å—è, –æ–Ω–∏ —Å–ª–∏–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω—É!</p>
                <p>–¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∏—Ç–∫—É 2048</p>
            </div>
        </div>
    `,
    
    'memory-cards': `
        <div class="game-container">
            <div class="game-stats">
                <div class="game-stat">
                    <div class="game-stat-value" id="pairsFound">0</div>
                    <div class="game-stat-label">–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="attemptsCount">0</div>
                    <div class="game-stat-label">–ü–æ–ø—ã—Ç–∫–∏</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="timerMemory">0</div>
                    <div class="game-stat-label">–í—Ä–µ–º—è</div>
                </div>
            </div>
            
            <div class="game-board">
                <div class="grid-memory" id="gridMemory"></div>
            </div>
            
            <div class="game-controls">
                <button class="btn btn-primary" onclick="startMemoryGame()">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                <button class="btn btn-secondary" onclick="showInstructions('Memory')">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</button>
            </div>
        </div>
    `,
    
    'typing-master': `
        <div class="game-container">
            <div class="game-stats">
                <div class="game-stat">
                    <div class="game-stat-value" id="wpm">0</div>
                    <div class="game-stat-label">–°–ª–æ–≤/–º–∏–Ω</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="accuracy">100%</div>
                    <div class="game-stat-label">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="game-stat">
                    <div class="game-stat-value" id="timerTyping">60</div>
                    <div class="game-stat-label">–°–µ–∫—É–Ω–¥—ã</div>
                </div>
            </div>
            
            <div class="typing-container">
                <div class="typing-text" id="typingText"></div>
                <input type="text" class="typing-input" id="typingInput" placeholder="–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –∑–¥–µ—Å—å...">
            </div>
            
            <div class="game-controls">
                <button class="btn btn-primary" onclick="startTypingTest()">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç</button>
                <button class="btn btn-secondary" onclick="showInstructions('Typing')">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</button>
            </div>
        </div>
    `
};

// Game Logic Functions
class Game2048 {
    constructor() {
        this.grid = [];
        this.score = 0;
        this.bestScore = parseInt(localStorage.getItem('best2048') || '0');
        this.moves = 0;
        this.init();
    }

    init() {
        this.grid = Array(4).fill().map(() => Array(4).fill(0));
        this.score = 0;
        this.moves = 0;
        this.addRandomTile();
        this.addRandomTile();
        this.updateDisplay();
    }

    addRandomTile() {
        const emptyCells = [];
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                if (this.grid[i][j] === 0) {
                    emptyCells.push({i, j});
                }
            }
        }

        if (emptyCells.length > 0) {
            const {i, j} = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            this.grid[i][j] = Math.random() < 0.9 ? 2 : 4;
        }
    }

    move(direction) {
        let moved = false;
        const oldGrid = this.grid.map(row => [...row]);

        // Implement move logic based on direction
        // This is a simplified version - you'd implement full 2048 logic here

        if (this.gridChanged(oldGrid)) {
            this.moves++;
            this.addRandomTile();
            moved = true;
        }

        this.updateDisplay();
        return moved;
    }

    gridChanged(oldGrid) {
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                if (oldGrid[i][j] !== this.grid[i][j]) return true;
            }
        }
        return false;
    }

    updateDisplay() {
        const gridElement = document.getElementById('grid2048');
        gridElement.innerHTML = '';

        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                const tile = document.createElement('div');
                tile.className = 'tile';
                if (this.grid[i][j] !== 0) {
                    tile.textContent = this.grid[i][j];
                    tile.classList.add(`tile-${this.grid[i][j]}`);
                }
                gridElement.appendChild(tile);
            }
        }

        document.getElementById('score2048').textContent = this.score;
        document.getElementById('moves2048').textContent = this.moves;
        document.getElementById('best2048').textContent = this.bestScore;

        if (this.score > this.bestScore) {
            this.bestScore = this.score;
            localStorage.setItem('best2048', this.bestScore.toString());
        }
    }
}

// Global game instances
let game2048;
let memoryGame;
let typingGame;

// Initialize games
function init2048() {
    game2048 = new Game2048();
}

function start2048() {
    game2048.init();
}

function startMemoryGame() {
    // Initialize memory game
    const symbols = ['üöÄ', '‚≠ê', 'üéÆ', 'üíª', 'üéØ', 'üß©', 'üé®', 'üéµ'];
    const cards = [...symbols, ...symbols];
    
    // Shuffle cards
    cards.sort(() => Math.random() - 0.5);
    
    const grid = document.getElementById('gridMemory');
    grid.innerHTML = '';
    
    cards.forEach((symbol, index) => {
        const card = document.createElement('div');
        card.className = 'memory-card';
        card.innerHTML = `
            <div class="front">${symbol}</div>
            <div class="back">?</div>
        `;
        card.addEventListener('click', () => flipCard(card, symbol));
        grid.appendChild(card);
    });
    
    // Reset stats
    document.getElementById('pairsFound').textContent = '0';
    document.getElementById('attemptsCount').textContent = '0';
    document.getElementById('timerMemory').textContent = '0';
}

function startTypingTest() {
    const texts = [
        "Neuron Ecosystem —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –º–∏—Ä–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.",
        "–ò–≥—Ä—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
    ];
    
    const randomText = texts[Math.floor(Math.random() * texts.length)];
    document.getElementById('typingText').innerHTML = '';
    document.getElementById('typingInput').value = '';
    document.getElementById('typingInput').disabled = false;
    document.getElementById('typingInput').focus();
    
    // Display text with spans for each character
    randomText.split('').forEach(char => {
        const span = document.createElement('span');
        span.textContent = char;
        document.getElementById('typingText').appendChild(span);
    });
    
    // Start timer
    let timeLeft = 60;
    document.getElementById('timerTyping').textContent = timeLeft;
    
    const timer = setInterval(() => {
        timeLeft--;
        document.getElementById('timerTyping').textContent = timeLeft;
        
        if (timeLeft <= 0) {
            clearInterval(timer);
            document.getElementById('typingInput').disabled = true;
            calculateTypingStats();
        }
    }, 1000);
}

function showInstructions(game) {
    const element = document.getElementById(`instructions${game}`);
    if (element) {
        element.style.display = element.style.display === 'none' ? 'block' : 'none';
    }
}

// Utility functions
function flipCard(card, symbol) {
    card.classList.toggle('flipped');
    // Add memory game logic here
}

function calculateTypingStats() {
    // Calculate WPM and accuracy
    const typedText = document.getElementById('typingInput').value;
    const originalText = document.getElementById('typingText').textContent;
    
    let correctChars = 0;
    for (let i = 0; i < Math.min(typedText.length, originalText.length); i++) {
        if (typedText[i] === originalText[i]) {
            correctChars++;
        }
    }
    
    const accuracy = (correctChars / originalText.length) * 100;
    const words = typedText.split(' ').length;
    const wpm = Math.round((words / 60) * 100); // Based on 60-second test
    
    document.getElementById('wpm').textContent = wpm;
    document.getElementById('accuracy').textContent = `${accuracy.toFixed(1)}%`;
}
